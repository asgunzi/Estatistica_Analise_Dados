# Ao passar 10 clientes em nossa loja, qual a probabilidade de realizarmos 2 vendas?
#Ou seja, queremos encontrar a probabilidade de dois sucessos, em dez tentativas. Cuja probabilidade de sucesso
# em cada tentativa √© 50%

from scipy.stats import binom

# Definindo os par√¢metros
x = 2
size = 10
prob = 0.5

# Calculando a probabilidade
probability = binom.pmf(x, size, prob)

print(probability)

#Onde:
# x √© o n√∫mero de sucessos,
# size √© o n√∫mero de tentativas,
# prob √© a probabilidade de sucesso em cada tentativa



# A fun√ß√£o a seguir gera quantidades aleat√≥rias de sucesso oriundos de uma quantidade (size) de tentativas dada a probabilidade
#(prob) de sucesso. 
# √â √∫til para realizar experimentos. Podemos simular qual a frequencia esperada de vendas a cada dez clientes ?
#Ainda mantendo a probabilidade de sucesso (cliente comprar) de 50%


#Vamos utilizar a biblioteca numpy para gerar os n√∫meros aleat√≥rios segundo uma binomial e o matplotlib para plotar
import numpy as np
import matplotlib.pyplot as plt

# Definindo os par√¢metros
n = 30
size = 10
prob = 0.5

# Gerando os n√∫meros binomiais
va_binomial = np.random.binomial(n=size, p=prob, size=n)

# Criando o histograma
plt.hist(va_binomial, bins=range(min(va_binomial), max(va_binomial) + 2), edgecolor='black')
plt.xlabel('N√∫mero de Sucessos')
plt.ylabel('Frequ√™ncia')
plt.title('Histograma de Vari√°veis Aleat√≥rias Binomiais')
plt.show()


##################################
#### DISTRIBUI√á√ÉO GEOM√âTRICA ####
##################################
#Exemplo: Definindo como sucesso o cliente comprar, e supondo que a probabilidade de sucesso √© 50%.
#Qual a probabilidade da primeira venda ocorrer quando o quinto cliente entrar na loja?
from scipy.stats import geom

# Definindo os par√¢metros
x = 5
prob = 0.5

# Calculando a probabilidade
probability = geom.pmf(x, prob)

print(probability)

#Onde:
# x √© o n√∫mero de tentativas at√© o primeiro sucesso (incluindo o sucesso)
# prob √© a probabilidade de sucessos
# Podemos utilizar a mesma fun√ß√£o para nos dar a probabilidade do sucesso ocorrer na primeira tentativa,
#Segunda tentativa, terceira tentativa ... at√© a d√©cima tentativa.
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import geom

# Definindo os par√¢metros
x = np.arange(1, 11)
prob = 0.5

# Calculando as probabilidades
va_geometrica = geom.pmf(x, prob)

# Exibindo as probabilidades
print(va_geometrica)

# Criando o gr√°fico
plt.plot(x, va_geometrica, marker='o')
plt.xlabel('N√∫mero de Tentativas')
plt.ylabel('Probabilidade')
plt.title('Distribui√ß√£o Geom√©trica (p = 0.5)')
plt.grid(True)
plt.show()

#Veja como as probabilidades v√£o diminuindo.
#ent√£o √© muito provavel que o sucesso ocorra logo nas primeiras tentativas
# Podemos utilizar a distribui√ß√£o geom√©trica acumulada para saber qual a probabilidade do  primeiro sucesso
#ocorrer na primeira tentativa OU na segunda tentativa OU na terceira tentativa

#Formalizando, queremos: P(X<=3)
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import geom

# Definindo os par√¢metros
x = np.arange(0, 4)
prob = 0.5

# Calculando as probabilidades acumuladas
va_geometrica_acumulada = geom.cdf(x, prob)

# Exibindo as probabilidades acumuladas
print(va_geometrica_acumulada)

# Criando o gr√°fico
plt.plot(x, va_geometrica_acumulada, marker='o')
plt.xlabel('N√∫mero de Falhas antes do Primeiro Sucesso')
plt.ylabel('Probabilidade Acumulada')
plt.title('Distribui√ß√£o Geom√©trica Acumulada (p = 0.5)')
plt.grid(True)
plt.show()


#########################################
#### DISTRIBUI√á√ÉO BINOMIAL NEGATIVA ####
#########################################
# Exemplo: Definindo como sucesso o cliente comprar, e supondo que a probabilidade de sucesso √© 50%. 
#Qual a probabilidade de ter que entrar 8 clientes at√© que a segunda venda ocorra?
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import geom

# Definindo os par√¢metros
x = np.arange(0, 4)
prob = 0.5

# Calculando as probabilidades acumuladas
va_geometrica_acumulada = geom.cdf(x, prob)

# Exibindo as probabilidades acumuladas
print(va_geometrica_acumulada)

# Criando o gr√°fico
plt.plot(x, va_geometrica_acumulada, marker='o')
plt.xlabel('N√∫mero de Falhas antes do Primeiro Sucesso')
plt.ylabel('Probabilidade Acumulada')
plt.title('Distribui√ß√£o Geom√©trica Acumulada (p = 0.5)')
plt.grid(True)
plt.show()

#Onde:
# x √© o n√∫mero de sucessos
# size √© a quantidade de tentativos
# prob √© a probabilidade de sucesso

#########################################
#### DISTRIBUI√á√ÉO POISSON ####
#########################################
# Exemplo: Uma loja recebe em m√©dia, 6 (ùù∫) clientes por minuto. Qual a probabilidade de que 5(x) clientes
#entrem em um minuto? 

from scipy.stats import poisson

# Definindo os par√¢metros
x = 5
lam = 6

# Calculando a probabilidade
probability = poisson.pmf(x, lam)

print(probability)

#Onde:
# x √© a quantidade a ser testada


# lambda √© a taxa m√©dia de ocorr√™cia do evento em um determinado per√≠odo de intervalo de tempo ou espa√ßo 
# Podemos utilizar a mesma funcao para obter a probabilidade de entrar um cliente, dois clientes... quinze clientes


# Observe que os valores se distribuiem simetricamente en tormo de seis, use acontece porque o paramentro
#lambda √© a m√©dia (e tamb√©m o desvio padr√£o) da distribui√ß√£o de Poisson
# Tamb√©m podemos obter a probabilidade acumulada de at√© 5 clientes entrarem na loja em  um minuto
#Formalizando, queremos: P(X<=5)

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import poisson

# Definindo os par√¢metros
x = np.arange(1, 16)
lam = 6

# Calculando as probabilidades
va_poisson = poisson.pmf(x, lam)

# Exibindo as probabilidades
print(va_poisson)

# Criando o gr√°fico
plt.plot(x, va_poisson, marker='o')
plt.xlabel('N√∫mero de Eventos')
plt.ylabel('Probabilidade')
plt.title('Distribui√ß√£o de Poisson (Œª = 6)')
plt.grid(True)
plt.show()



#########################################
#### DISTRIBUI√á√ÉO NORMAL ####
#########################################
# Exemplo: Suponha que a distribui√ß√£o dos sal√°rios dos funcion√°rios de uma empresa sigam uma distribui√ß√£o
#normal com m√©dia ùúá=2.500 e desvio padr√£o œÉ= 170.
# Ao selecionar aleatoriamente um indiv√≠duo dessa popula√ß√£o, qual a probabilidade de ter sal√°rio entre 
#2.400 e 2.600 ?
# Precisamos achar a probabilidade do indiv√≠duo ter um sal√°rio de at√© 2.600 e subtrair pela  probabilidade do
#indiv√≠duo ter o sal√°rio at√© 2.400

from scipy.stats import norm

# Definindo os par√¢metros
mean = 2500
sd = 170

# Calculando as probabilidades acumuladas
probabilidade_ate_2600 = norm.cdf(2600, mean, sd)
probabilidade_ate_2400 = norm.cdf(2400, mean, sd)

# Calculando a diferen√ßa das probabilidades
diferenca_probabilidade = probabilidade_ate_2600 - probabilidade_ate_2400

print(diferenca_probabilidade)


#Podemos gerar 100 n√∫meros aleat√≥rios para uma distribui√ß√£o normal com m√©dia 2500 e desvio padr√£o 170

import numpy as np
import matplotlib.pyplot as plt

# Definindo os par√¢metros
n = 100
mean = 2500
sd = 170

# Gerando os n√∫meros da distribui√ß√£o normal
va_normal = np.random.normal(mean, sd, n)

# Criando o histograma
plt.hist(va_normal, bins=10, edgecolor='black')
plt.xlabel('Valor')
plt.ylabel('Frequ√™ncia')
plt.title('Histograma de Vari√°veis Aleat√≥rias Normais')
plt.grid(True)
plt.show()



#########################################
#### DISTRIBUI√á√ÉO F ####
#########################################
#Gerando uma amostra aleat√≥ria de 1000 n√∫mero seguindo uma distribui√ß√£o F
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import f

# Definindo os par√¢metros
n = 1000
df1 = 5
df2 = 33

# Gerando os n√∫meros da distribui√ß√£o F
va_f = f.rvs(df1, df2, size=n)

# Criando o histograma
plt.hist(va_f, bins=30, edgecolor='black')
plt.xlabel('Valor')
plt.ylabel('Frequ√™ncia')
plt.title('Histograma de Vari√°veis Aleat√≥rias F')
plt.grid(True)
plt.show()

#V√° aumentando os graus de liberdade e observe como a distribui√ß√£o se aproxima da normal
#Informa√ß√£o Extra: Uma distribui√ß√£o F √© a raz√£o entre duas chi-quadrado


#########################################
#### DISTRIBUI√á√ÉO T ####
#########################################
#Gera uma amostra aleat√≥ria de 1000 n√∫meros seguindo uma distribui√ß√£o T
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import t

# Definindo os par√¢metros
n = 1000
df = 2

# Gerando os n√∫meros da distribui√ß√£o t
va_t = t.rvs(df, size=n)

# Criando o histograma
plt.hist(va_t, bins=30, edgecolor='black')
plt.xlabel('Valor')
plt.ylabel('Frequ√™ncia')
plt.title('Histograma de Vari√°veis Aleat√≥rias t (df = 2)')
plt.grid(True)
plt.show()

#Observe que a distribui√ß√£o t, assim como a normal padr√£o, √© centrada no zero
#V√° aumentando o grau de liberdade e observando o comportamento do histograma

#########################################
#### DISTRIBUI√á√ÉO QUI-QUADRADO ####
#########################################
#Gera uma amostra aleat√≥ria de 1000 n√∫meros seguindo uma distribui√ß√£o qui-quadrado
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import chi2

# Definindo os par√¢metros
n = 1000
df = 3

# Gerando os n√∫meros da distribui√ß√£o qui-quadrado
va_QuiQuadrado = chi2.rvs(df, size=n)

# Criando o histograma
plt.hist(va_QuiQuadrado, bins=30, edgecolor='black')
plt.xlabel('Valor')
plt.ylabel('Frequ√™ncia')
plt.title('Histograma de Vari√°veis Aleat√≥rias Qui-Quadrado (df = 3)')
plt.grid(True)
plt.show()



